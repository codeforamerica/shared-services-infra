/**
 * Lambda@Edge Function for Okta Authentication
 *
 * This function intercepts requests at a CloudFront edge location to enforce
 * authentication via the OpenID Connect (OIDC) with Okta.
 *
 * How it works:
 *
 * 1. On a viewer request, it checks for a valid session JWT (id_token)
 * 2. If the JWT is missing or invalid, it redirects the user to the Okta login
 *    page
 * 3. After Okta login, the user is redirected back to a /callback URL
 * 4. The function handles the /callback, exchanges the authorization code from
 *    Okta for an ID token, validates the token, and sets a secure cookie
 * 5.  For all later requests, the function allows access to the S3 content
 */
import { SecretsManagerClient, GetSecretValueCommand } from '@aws-sdk/client-secrets-manager';
import * as jose from 'jose';
import { randomBytes } from 'crypto';
import { stringify as stringifyQuery, parse as parseQuery } from 'querystring';

const SECRET_ARN = '${secret_arn}';
const DOMAIN = "https://codeforamerica.okta.com";
const CALLBACK_PATH = '/_callback';
const LOGOUT_PATH = '/_logout';
const COOKIE_SETTINGS = 'Path=/; Secure; HttpOnly; SameSite=Lax';
const SESSION_DURATION_SECONDS = 8 * 60 * 60; // 8 hours
const ID_TOKEN_COOKIE_NAME = 'IdToken';
const NONCE_COOKIE_NAME = 'Nonce';

const PROTECTED_PATHS = [
  %{ for path in protected_prefixes ~}
    new RegExp(`^/${path}/.*`),
  %{ endfor ~}
]


// Cache secrets and JWKS in the global scope to reuse across warm invocations.
let cachedSecrets = null;
let cachedJwks = null;

/**
 * Fetches secrets from AWS Secrets Manager.
 *
 * Caches the result in a global variable for subsequent invocations.
 *
 * @returns {Promise<object>} The parsed JSON object of secrets.
 */
async function getSecrets() {
  if (cachedSecrets) {
    console.log('Using cached secrets.');
    return cachedSecrets;
  }

  console.log(`Fetching secrets from ARN: $${SECRET_ARN}`);
  const secretsClient = new SecretsManagerClient({ region: 'us-east-1' });
  const command = new GetSecretValueCommand({ SecretId: SECRET_ARN });

  try {
    const data = await secretsClient.send(command);
    if ('SecretString' in data) {
      cachedSecrets = JSON.parse(data.SecretString);
      return cachedSecrets;
    }

    throw new Error('SecretString not found in Secrets Manager response.');
  } catch (error) {
    console.error('Failed to fetch secrets:', error);
    throw new Error('Could not retrieve secrets from AWS Secrets Manager.');
  }
}

/**
 * Fetches the JSON Web Key Set (JWKS) from the Okta authorization server.
 *
 * Caches the result for reuse.
 *
 * @param {string} oktaDomain The base URL of your Okta domain.
 * @returns {jose.JWKSet} A key set that can be used by the jose library.
 */
async function getJwks(oktaDomain) {
  if (cachedJwks) {
    console.log('Using cached JWKS.');
    return cachedJwks;
  }

  console.log('Fetching JWKS from Okta.');
  const jwksUrl = new URL(`$${oktaDomain}/oauth2/v1/keys`);
  cachedJwks = jose.createRemoteJWKSet(jwksUrl);

  return cachedJwks;
}

/**
 * The main handler function executed by Lambda@Edge.
 */
export const handler = async (event) => {
  const { request } = event.Records[0].cf;
  const domainName = request.headers.host[0].value;
  const requestedUri = `$${request.uri}$${request.querystring ? '?' + request.querystring : ''}`;

  console.log(`Request for URI: $${requestedUri}`);

  try {
    const secrets = await getSecrets();

    // Route request based on the path.
    switch (request.uri) {
      case CALLBACK_PATH:
        return handleAuthCallback(request, secrets, domainName);
      case LOGOUT_PATH:
        return handleLogout(secrets, domainName);
      default:
        request.uri = rewriteUri(request.uri);

        // If this path matches any of the protected paths, we need to
        // verify the user's authentication status.
        if (PROTECTED_PATHS.some(pattern => pattern.test(request.uri))) {
          console.log('Protected path detected, verifying authentication.');
          return verifyAuthentication(request, secrets, domainName, requestedUri);
        }

        return request;
    }
  } catch (error) {
    console.error('Unhandled error in handler:', error);
    return {
      status: '500',
      statusDescription: 'Internal Server Error',
      body: 'An unexpected error occurred. Please check the logs.',
    };
  }
};

/**
 * Rewrites the request URI to ensure it points to the correct S3 object.
 *
 * @param {string} requestUri The original request URI.
 * @returns {*|string}
 */
function rewriteUri(requestUri) {
  // If the request is being made to a directory (e.g. / or /docs), we want to
  // append "index.html" so that S3 serves the proper object. If the path
  // doesn't contain a file extension, we assume it's a directory as well.
  if (requestUri.endsWith('/')) {
    return `$${requestUri}index.html`;
  } else if (!requestUri.includes('.')) {
    return `$${requestUri}/index.html`;
  }

  return requestUri;
}

/**
 * Verifies if the user has a valid session cookie and redirects to Okta login
 * if not.
 *
 * @param {object} request The CloudFront request object.
 * @param {object} secrets The Okta secrets.
 * @param {string} domainName The domain of the request.
 * @param {string} requestedUri The original URI the user requested.
 * @returns {Promise<object>} A request or redirect response.
 */
async function verifyAuthentication(request, secrets, domainName, requestedUri) {
  const cookies = parseCookies(request.headers);
  const idToken = cookies[ID_TOKEN_COOKIE_NAME];

  if (!idToken) {
    console.log('No IdToken cookie found. Redirecting to login.');
    return redirectToLogin(request, secrets, domainName, requestedUri);
  }

  try {
    console.log('Verifying IdToken...');
    const jwks = await getJwks(DOMAIN);
    const { payload } = await jose.jwtVerify(idToken, jwks, {
      issuer: DOMAIN,
      audience: secrets.client_id,
    });

    // The token is valid, allow the request to proceed to the origin.
    console.log(`Token verified for user: $${payload.sub}`);
    return request;
  } catch (err) {
    // The token is invalid or expired; redirect to log in.
    console.error('IdToken verification failed:', err.message);
    return redirectToLogin(request, secrets, domainName, requestedUri);
  }
}

/**
 * Handles the OIDC callback from Okta.
 *
 * @param {object} request The CloudFront request object.
 * @param {object} secrets The Okta secrets.
 * @param {string} domainName The domain of the request.
 * @returns {Promise<object>} A redirect response.
 */
async function handleAuthCallback(request, secrets, domainName) {
  const cookies = parseCookies(request.headers);
  const query = parseQuery(request.querystring);
  const { code, state } = query;

  // Validate state to prevent CSRF.
  const decodedState = JSON.parse(Buffer.from(state, 'base64').toString());
  if (decodedState.nonce !== cookies[NONCE_COOKIE_NAME]) {
    throw new Error('Invalid state parameter. Possible CSRF attack.');
  }

  // Exchange authorization code for tokens.
  console.log('Exchanging authorization code for tokens...');
  const tokenEndpoint = new URL(`$${DOMAIN}/oauth2/v1/token`);
  const redirectUri = `https://$${domainName}$${CALLBACK_PATH}`;
  const basicAuth = Buffer.from(`$${secrets.client_id}:$${secrets.client_secret}`).toString('base64');

  const tokenResponse = await fetch(tokenEndpoint.toString(), {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Authorization': `Basic $${basicAuth}`,
    },
    body: stringifyQuery({
      grant_type: 'authorization_code',
      code,
      redirect_uri: redirectUri,
    }),
  });

  if (!tokenResponse.ok) {
    const errorBody = await tokenResponse.text();
    throw new Error(`Failed to exchange code for token: $${errorBody}`);
    }

    const { id_token } = await tokenResponse.json();

    // Create redirect response with the session cookie.
    console.log('Token received. Setting session cookie and redirecting .');
    return {
        status: '302',
        statusDescription: 'Found',
        headers: {
            'location': [{ key: 'Location', value: decodedState.requestedUri }],
            'set-cookie': [
                { key: 'Set-Cookie', value: `$${ID_TOKEN_COOKIE_NAME}=$${id_token}; Max-Age=$${SESSION_DURATION_SECONDS}; $${COOKIE_SETTINGS}` },
                { key: 'Set-Cookie', value: `$${NONCE_COOKIE_NAME}=; Max-Age=0; $${COOKIE_SETTINGS}` }, // Clear nonce
            ],
        },
    };
}

/**
 * Generates a redirect response to the Okta login page.
 *
 * @param {object} request The CloudFront request object.
 * @param {object} secrets The Okta secrets.
 * @param {string} domainName The domain of the request.
 * @param {string} requestedUri The original URI the user requested.
 * @returns {object} A redirect response object.
 */
function redirectToLogin(request, secrets, domainName, requestedUri) {
    const nonce = randomBytes(16).toString('hex');
    const state = Buffer.from(JSON.stringify({ nonce, requestedUri })).toString('base64');
    const redirectUri = `https://$${domainName}$${CALLBACK_PATH}`;

    const loginParams = stringifyQuery({
        response_type: 'code',
        client_id: secrets.client_id,
        redirect_uri: redirectUri,
        scope: 'openid profile email',
        state,
        nonce,
    });

    const loginUrl = `$${DOMAIN}/oauth2/v1/authorize?$${loginParams}`;

    return {
        status: '302',
        statusDescription: 'Found',
        headers: {
            'location': [{ key: 'Location', value: loginUrl }],
            'set-cookie': [{ key: 'Set-Cookie', value: `$${NONCE_COOKIE_NAME}=$${nonce}; $${COOKIE_SETTINGS}` }],
        },
    };
}

/**
 * Clears session cookies and redirects to the Okta logout URL.
 *
 * @param {object} secrets The Okta secrets.
 * @param {string} domainName The domain of the request.
 * @returns {object} A redirect response object.
 */
function handleLogout(secrets, domainName) {
    const postLogoutRedirectUri = `https://$${domainName}`;
    const logoutUrl = `$${DOMAIN}/oauth2/v1/logout?post_logout_redirect_uri=$${encodeURIComponent(postLogoutRedirectUri)}`;

    console.log('Logging out user.');
    return {
        status: '302',
        statusDescription: 'Found',
        headers: {
            'location': [{ key: 'Location', value: logoutUrl }],
            'set-cookie': [
                { key: 'Set-Cookie', value: `$${ID_TOKEN_COOKIE_NAME}=; Max-Age=0; $${COOKIE_SETTINGS}` },
                { key: 'Set-Cookie', value: `$${NONCE_COOKIE_NAME}=; Max-Age=0; $${COOKIE_SETTINGS}` },
            ],
        },
    };
}

/**
 * Parses cookies from request headers.
 *
 * @param {object} headers The request headers object.
 * @returns {object} A key-value map of cookies.
 */
function parseCookies(headers) {
    const cookies = {};
    if (headers.cookie) {
        headers.cookie[0].value.split(';').forEach(cookie => {
            if (cookie) {
                const parts = cookie.split('=');
                const name = parts[0].trim();
                const value = parts.slice(1).join('=').trim();
                if (name && value) {
                    cookies[name] = value;
                }
            }
        });
    }

    return cookies;
}
